---
apiVersion: v1
kind: Template
metadata:
  name: ${identifier}
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${identifier}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${identifier}
    name: ${identifier}
    annotations:
      ignore-check.kube-linter.io/unset-cpu-requirements: "no cpu limits"
  spec:
    replicas: ${{REPLICAS}}
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1
    selector:
      matchLabels:
        app: ${identifier}
    template:
      metadata:
        labels:
          app: ${identifier}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - ${identifier}
                topologyKey: "kubernetes.io/hostname"
              weight: 100
        serviceAccountName: ${identifier}
        containers:
        - image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          name: ${identifier}
          env:
            # database settings
            - name: DATABASE_HOST
              valueFrom:
                 secretKeyRef:
                   name: ${databaseSecret}
                   key: db.host
            - name: DATABASE_PORT
              valueFrom:
                 secretKeyRef:
                   name: ${databaseSecret}
                   key: db.port
            - name: DATABASE_USERNAME
              valueFrom:
                 secretKeyRef:
                   name: ${databaseSecret}
                   key: db.user
            - name: DATABASE_PASSWORD
              valueFrom:
                 secretKeyRef:
                   name: ${databaseSecret}
                   key: db.password
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: ${databaseSecret}
                  key: db.name
            # keycloak settings
            - name: KC_HOST
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: KC_HOST
            - name: KC_REALM
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: KC_REALM
            - name: KC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: KC_CLIENT_ID
            - name: KC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: KC_CLIENT_SECRET
            # roles
            - name: KC_ADMIN_ROLES
              value: ${admin_roles}
            - name: KC_EDITOR_ROLES
              value: ${editor_roles}
            - name: KC_VIEWER_ROLES
              value: ${viewer_roles}
            # init tokens
            - name: INIT_ADMIN_API_TOKENS
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: INIT_ADMIN_API_TOKENS
            - name: INIT_CLIENT_API_TOKENS
              valueFrom:
                secretKeyRef:
                  name: ${configSecret}
                  key: INIT_CLIENT_API_TOKENS
            # misc settings
            - name: UNLEASH_URL
              value: https://${host}
          ports:
          - name: unleash
            containerPort: 4242
          resources:
            requests:
              memory: ${MEMORY_REQUESTS}
              cpu: ${CPU_REQUESTS}
            limits:
              memory: ${MEMORY_LIMIT}
          readinessProbe:
            httpGet:
              path: /health
              port: unleash
            initialDelaySeconds: 30
            timeoutSeconds: 10
            successThreshold: 5
          livenessProbe:
            httpGet:
              path: /health
              port: unleash
            initialDelaySeconds: 30
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: [ "sleep", "10" ]
- apiVersion: v1
  kind: Service
  metadata:
    name: ${identifier}
    labels:
      app: ${identifier}
  spec:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 4242
        name: ${identifier}
    selector:
      app: ${identifier}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: ${issuer_name}
    labels:
      service: ${identifier}
    name: ${identifier}
  spec:
    host: ${host}
    to:
      kind: Service
      name: ${identifier}
      weight: 100
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge

parameters:
- name: IMAGE
  value: quay.io/app-sre/unleash
  displayName: unleash image
  description: unleash docker image. Defaults to quay.io/app-sre/unleash
- name: IMAGE_TAG
  value: latest
  displayName: unleash version
  description: unleash version which defaults to latest
- name: REPLICAS
  value: "3"
- name: MEMORY_REQUESTS
  value: 100Mi
- name: MEMORY_LIMIT
  value: 200Mi
- name: CPU_REQUESTS
  value: 50m
- name: identifier
  value: app-interface
- name: configSecret
  value: app-interface-config
- name: databaseSecret
  value: app-interface-unleash-rds
- name: host
- name: admin_roles
  value: ""
- name: editor_roles
  value: ""
- name: viewer_roles
  value: ""
- name: issuer_name
  value: letsencrypt-prod-http
